{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","api/auth-api.ts","utils/error-utils.ts","State/auth-reducer.ts","State/app-reducer.ts","components/ErrorSnackbar.tsx","api/task-api.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","Task.tsx","State/todolists-reducer.ts","State/tasks-reducer.ts","Todolist.tsx","TodolistList.tsx","State/Store.ts","Login.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","arg","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","Alert","props","elevation","variant","TaskStatuses","ErrorSnackbar","useSelector","app","useDispatch","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","size","onChange","e","currentTarget","onKeyPress","key","helperText","label","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","taskAPI","taskId","model","Task","task","removeTask","changeTitleTask","changeStatusOfTask","onClickRemoveTaskHandler","useCallback","id","onChangeIsDoneHandler","newIsDoneValue","checked","Completed","InProgress","onChangeTitle","newValue","className","Checkbox","Delete","fetchTodolistsTC","todolists","updateTodolistTitleTC","deleteTodolistTC","changeTodolistEntityStatusAC","entityStatus","addTodolistTC","todolist","item","changeFilterOfTodolistAC","index","findIndex","tl","filter","map","splice","unshift","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","updateTaskTC","getState","allTasksFromState","tasksForCurrentTodolist","find","t","apiModel","startDate","priority","description","deadline","domainModel","tasksReducer","forEach","todoListId","Todolist","changeFilter","addTask","removeTodolist","changeTodolistTitle","demo","useEffect","createTask","onChangeTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","Button","TodolistList","auth","titleTask","idTask","newTitle","addTodolist","changeTitleTodolist","Grid","container","style","padding","spacing","Paper","to","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","setFieldError","field","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","AppWithRedux","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.31dca0e9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport {TodolistEntityType} from \"../AppWithRedux\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '2f8b88ce-de54-4bd6-9153-b38ec847d28e'\r\n    }\r\n})\r\nexport type FieldErrorType = {\r\n    field: string\r\n    error: string\r\n}\r\nexport type ResponseType<D = {}> = { //если не передавать D, то будет пустым объектом\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistEntityType>>(`/todo-lists/`)\r\n    },\r\n    addTodolist(title: string) {\r\n        return instance.post<ResponseType<{item: TodolistType}>>(`/todo-lists/`, {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`/todo-lists/${todolistId}`, {title: title})\r\n    }\r\n}\r\n\r\n","import {instance, ResponseType} from \"./todolist-api\";\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('/auth/me')\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('/auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}","import {setAppErrorAC, setAppStatusAC} from \"../State/app-reducer\";\r\nimport {ResponseType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n        dispatch(setAppStatusAC({status: 'failed'}))\r\n    }\r\n    dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : null}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n\r\n}\r\n","import {authAPI, LoginParamsType} from \"../api/auth-api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {FieldErrorType} from \"../api/todolist-api\";\r\n\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> }\r\n}>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            }\r\n        );\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n","import {authAPI} from \"../api/auth-api\";\r\nimport {setIsLoggedInAC} from \"./auth-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type AppStateType = {\r\n    status: RequestStatusType\r\n    error: null | string\r\n    isInitialized: boolean\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'  //простой, загрузка, успешно, сбой\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (arg, thunkAPI) => {\r\n    const res = await authAPI.authMe()\r\n    if (res.data.resultCode === 0) {\r\n        thunkAPI.dispatch(setIsLoggedInAC({value: true}))\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState:  {\r\n        status: \"idle\",\r\n        error: null,\r\n        isInitialized: false\r\n    } as AppStateType,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state)=>{\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n","import {Snackbar} from \"@material-ui/core\";\r\nimport MuiAlert, {AlertProps} from \"@material-ui/lab/Alert\";\r\nimport React, {SyntheticEvent} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../State/Store\";\r\nimport {setAppErrorAC} from \"../State/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n    const error = useSelector<RootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const isOpen = (error !== null)\r\n\r\n    const handleClose = (event?: SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null})) //чтобы ошибка исчезла\r\n    }\r\n\r\n    return (\r\n    <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n            {error}\r\n        </Alert>\r\n    </Snackbar>)\r\n}","import {instance, ResponseType} from \"./todolist-api\";\r\n\r\nexport enum TaskStatuses {\r\n    InProgress = 0,\r\n    Completed = 1\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport const taskAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    console.log('AddItemForm')\r\n    let [title, setTitle] = useState<string>('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    const addItemUsingEnterKey = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) setError(null) //ошибка будет пропадать при наборе текста\r\n        if (e.key === 'Enter') addItemHandler()\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return <div>\r\n        <TextField size={'small'}\r\n                   disabled={disabled}\r\n                   variant={'outlined'}\r\n                   value={title}\r\n                   onChange={changeTitle}\r\n                   onKeyPress={addItemUsingEnterKey}\r\n                   error={!!error}  //добавляет красную рамку на инпут\r\n                   helperText={error}  //текст при ошибке\r\n                   label={'Title'}  //placeholder, красиво поднимающийся выше при вводе текста\r\n        />\r\n        <IconButton onClick={addItemHandler} color={'primary'} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange, disabled = false}: EditableSpanPropsType) => {\r\n    console.log('EditableSpan')\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(value)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n\r\n    const changeTitleValue = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode ?\r\n        <TextField size={'small'} variant={'outlined'} value={title} autoFocus onChange={changeTitleValue} onBlur={activateViewMode} disabled={disabled}/>\r\n        : <span onDoubleClick={activateEditMode}>{value}</span>\r\n})","import {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {TaskStatuses, TaskType} from \"./api/task-api\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTitleTask: (idTask: string, newTitle: string, todolistId: string) => void\r\n    changeStatusOfTask: (idTask: string, status: TaskStatuses, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({todolistId, task, removeTask, changeTitleTask, changeStatusOfTask}: TaskPropsType) => {\r\n    const onClickRemoveTaskHandler = useCallback(() => removeTask(task.id, todolistId), [removeTask, task.id, todolistId])\r\n\r\n    const onChangeIsDoneHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const newIsDoneValue = e.currentTarget.checked\r\n        changeStatusOfTask(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.InProgress, todolistId)\r\n    }, [changeStatusOfTask, task.id, todolistId])\r\n\r\n    const onChangeTitle = useCallback((newValue: string) => {\r\n        changeTitleTask(task.id, newValue, todolistId)\r\n    }, [changeTitleTask, task.id, todolistId])\r\n\r\n    return <div className={task.status ? 'is-done' : ''}>\r\n        <Checkbox color={'primary'} checked={!!task.status} onChange={onChangeIsDoneHandler}/>\r\n        <EditableSpan value={task.title} onChange={onChangeTitle}/>\r\n        <IconButton onClick={onClickRemoveTaskHandler}><Delete/></IconButton>\r\n    </div>\r\n})\r\n","import {FilterValuesType, TodolistEntityType} from \"../AppWithRedux\";\r\nimport {todolistAPI} from \"../api/todolist-api\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists', async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistAPI.getTodolists()\r\n    try {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const updateTodolistTitleTC = createAsyncThunk('todolists/updateTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistAPI.updateTodolist(param.id, param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const deleteTodolistTC = createAsyncThunk('todolists/deleteTodolist', async (id: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id, entityStatus: 'loading'}))\r\n    await todolistAPI.deleteTodolist(id)\r\n    try {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return id\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (title: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistAPI.addTodolist(title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistEntityType>,\r\n    reducers: {\r\n        changeFilterOfTodolistAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"succeeded\"}))\r\n        })\r\n        builder.addCase(updateTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) state[index].title = action.payload.title\r\n        })\r\n        builder.addCase(deleteTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload)\r\n            if (index > -1) state.splice(index, 1)\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"succeeded\"})\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {changeTodolistEntityStatusAC, changeFilterOfTodolistAC} = slice.actions\r\n\r\n","import {addTodolistTC, deleteTodolistTC, fetchTodolistsTC} from \"./todolists-reducer\";\r\nimport {taskAPI, UpdateTaskModelType} from \"../api/task-api\";\r\nimport {TasksStateType} from \"../AppWithRedux\";\r\nimport {RootStateType} from \"./Store\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await taskAPI.getTasks(todolistId)\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolistId, tasks: res.data.items}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { todolistId: string, taskId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        await taskAPI.deleteTask(param.todolistId, param.taskId)\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolistId: param.todolistId, id: param.taskId}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { todolistId: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await taskAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {task: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask',\r\n    async (param: { todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType }, thunkAPI) => {\r\n        const state = thunkAPI.getState() as RootStateType\r\n        const allTasksFromState: TasksStateType = state.tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[param.todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === param.taskId)\r\n\r\n        if (!task) thunkAPI.rejectWithValue('Task not found at the state')\r\n\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...param.domainModel\r\n            }\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n            const res = await taskAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n            try {\r\n                if (res.data.resultCode === 0) {\r\n                    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    return ({\r\n                        todolistId: param.todolistId,\r\n                        id: param.taskId,\r\n                        model: param.domainModel\r\n                    })\r\n                } else {\r\n                    handleServerAppError(res.data, thunkAPI.dispatch)\r\n                    return thunkAPI.rejectWithValue({})\r\n                }\r\n            } catch (error) {\r\n                handleServerNetworkError(error, thunkAPI.dispatch)\r\n                return thunkAPI.rejectWithValue({})\r\n            }\r\n        }\r\n    }\r\n)\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(deleteTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload]\r\n        });\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            if (action.payload) state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.id)\r\n                if (index > -1) state[action.payload.todolistId].splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        });\r\n        builder.addCase(updateTaskTC.fulfilled, (state, {payload}) => {\r\n            if (payload) {\r\n            const tasks = state[payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === payload.id)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...payload.model}\r\n            }}\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n//Thunk Creators\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {FilterValuesType, TodolistEntityType} from \"./AppWithRedux\";\r\nimport {TaskStatuses, TaskType} from \"./api/task-api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./State/tasks-reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistEntityType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (titleTask: string, todolistId: string) => void\r\n    changeStatusOfTask: (idTask: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTitleTask: (idTask: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo((\r\n    {\r\n        todolist, tasks, removeTask, changeFilter, addTask, changeStatusOfTask, removeTodolist,\r\n        changeTitleTask, changeTodolistTitle, demo = false\r\n    }: TodolistPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {    //если демо-режим для storybook, то не диспатчить санку\r\n            return;\r\n        }\r\n        dispatch(fetchTasksTC(todolist.id))\r\n\r\n    }, [dispatch, todolist.id, demo])\r\n\r\n    const createTask = useCallback((title: string) => { //хук чтобы addItemForm не перерисовывалась постоянно\r\n        addTask(title, todolist.id)\r\n    }, [addTask, todolist.id])\r\n\r\n    const onChangeTodolistTitle = useCallback((newValue: string) => {\r\n        changeTodolistTitle(newValue, todolist.id)\r\n    }, [changeTodolistTitle, todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', todolist.id), [changeFilter, todolist.id])\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', todolist.id), [changeFilter, todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', todolist.id), [changeFilter, todolist.id])\r\n\r\n    let tasksForTodolist = tasks\r\n    if (todolist.filter === 'active') tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.InProgress)\r\n    if (todolist.filter === 'completed') tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <EditableSpan value={todolist.title} onChange={onChangeTodolistTitle} disabled={todolist.entityStatus === 'loading'}/>\r\n                <IconButton onClick={() => removeTodolist(todolist.id)} disabled={todolist.entityStatus === 'loading'}><Delete/></IconButton>\r\n            </div>\r\n\r\n            <AddItemForm addItem={createTask} disabled={todolist.entityStatus === 'loading'}/>\r\n\r\n            <div>\r\n                {tasksForTodolist.map(t => {\r\n                    return <Task todolistId={todolist.id} task={t} key={t.id} changeTitleTask={changeTitleTask}\r\n                                 removeTask={removeTask} changeStatusOfTask={changeStatusOfTask}/>\r\n                })}\r\n            </div>\r\n\r\n            <div>\r\n                <Button variant={todolist.filter === 'all' ? \"outlined\" : 'text'}\r\n                        onClick={onAllClickHandler}>\r\n                    All\r\n                </Button>\r\n                <Button variant={todolist.filter === 'active' ? \"outlined\" : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n                        color={'primary'}>\r\n                    Active\r\n                </Button>\r\n                <Button variant={todolist.filter === 'completed' ? \"outlined\" : 'text'}\r\n                        onClick={onCompletedClickHandler}\r\n                        color={'secondary'}>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./State/Store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeFilterOfTodolistAC,\r\n    deleteTodolistTC,\r\n    fetchTodolistsTC,\r\n    updateTodolistTitleTC\r\n} from \"./State/todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./State/tasks-reducer\";\r\nimport {TaskStatuses} from \"./api/task-api\";\r\nimport {FilterValuesType, TasksStateType, TodolistEntityType} from \"./AppWithRedux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistList = ({demo = false}: PropsType) => {\r\n    const todolists = useSelector<RootStateType, Array<TodolistEntityType>>(state => state.todolists)\r\n    const tasks = useSelector<RootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {    //если демо-режим для storybook или не залогинены, то не диспатчить санку\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch, demo, isLoggedIn])\r\n\r\n    //ТАСКИ\r\n\r\n    //добавление таски\r\n    const addTask = useCallback((titleTask: string, todolistId: string) => {\r\n        dispatch(addTaskTC({todolistId, title: titleTask}))\r\n    }, [dispatch])\r\n\r\n    //удаление таски\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(removeTaskTC({todolistId, taskId}))\r\n    }, [dispatch])\r\n\r\n    //смена наименования таски\r\n    const changeTitleTask = useCallback((idTask: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC({todolistId, taskId: idTask, domainModel: {title: newTitle}}))\r\n    }, [dispatch])\r\n\r\n    //смена статуса выполнения таски\r\n    const changeStatusOfTask = useCallback((idTask: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC({todolistId, taskId: idTask, domainModel: {status}}))\r\n    }, [dispatch])\r\n\r\n    //ТУДУЛИСТЫ\r\n\r\n    //удаление тудулиста\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(deleteTodolistTC(id))\r\n    }, [dispatch])\r\n\r\n    //добавление тудулиста\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    //смена наименования тудулиста\r\n    const changeTitleTodolist = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(updateTodolistTitleTC({id: todolistId, title: newTitle}))\r\n    }, [dispatch])\r\n\r\n    //смена фильтра\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeFilterOfTodolistAC({id: todolistId, filter: value}))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <div>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolists.map(tl => {\r\n                return <Grid item key={tl.id}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <Todolist\r\n                            key={tl.id}\r\n                            todolist={tl}\r\n                            tasks={tasks[tl.id]}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeStatusOfTask={changeStatusOfTask}\r\n                            removeTodolist={removeTodolist}\r\n                            changeTitleTask={changeTitleTask}\r\n                            changeTodolistTitle={changeTitleTodolist}\r\n                            demo={demo}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n    </div>\r\n}","import {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {combineReducers} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n        todolists: todolistsReducer,\r\n        tasks: tasksReducer,\r\n        app: appReducer,\r\n        auth: authReducer\r\n    }\r\n)\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./State/auth-reducer\";\r\nimport {RootStateType, useAppDispatch} from \"./State/Store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be 4 characters or more'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: async (values, formikHelpers) => {\r\n            const action = await dispatch(loginTC(values))\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors && action.payload?.fieldsErrors.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noopener noreferrer\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {(formik.touched.email && formik.errors.email) &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {(formik.touched.password && formik.errors.password) &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                               checked={formik.values.rememberMe}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistType} from \"./api/todolist-api\";\r\nimport {TaskType} from \"./api/task-api\";\r\nimport {initializeAppTC, RequestStatusType} from \"./State/app-reducer\";\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar\";\r\nimport {TodolistList} from \"./TodolistList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./State/Store\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"./Login\";\r\nimport {logoutTC} from \"./State/auth-reducer\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistEntityType = TodolistType & { filter: FilterValuesType, entityStatus: RequestStatusType }\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType> // объект может иметь свойства-ключи, которые строковые\r\n    // (а ключи вообще в объекте и не могут быть иными), а вот значения этих св-в - это массив объектов TaskType\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction AppWithRedux({demo = false}: PropsType) {\r\n    const status = useSelector<RootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<RootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./State/Store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter><AppWithRedux/></HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}